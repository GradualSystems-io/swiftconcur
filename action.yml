name: 'SwiftConcur CI'
description: 'Detect and track Swift concurrency warnings in your codebase'
author: 'SwiftConcur'
branding:
  icon: 'check-circle'
  color: 'orange'

inputs:
  swift-version:
    description: 'Swift version to use'
    required: false
    default: 'latest'
  
  workspace-path:
    description: 'Path to .xcworkspace file'
    required: false
  
  project-path:
    description: 'Path to .xcodeproj file (if not using workspace)'
    required: false
  
  scheme:
    description: 'Xcode scheme to build'
    required: true
  
  configuration:
    description: 'Build configuration (Debug/Release)'
    required: false
    default: 'Debug'
  
  threshold:
    description: 'Maximum allowed warnings (fail if exceeded)'
    required: false
    default: '0'
  
  warn-threshold:
    description: 'Warning threshold (soft warning before fail)'
    required: false
    default: '0'
  
  baseline-path:
    description: 'Path to baseline JSON for comparison'
    required: false
  
  post-comment:
    description: 'Post results as PR comment'
    required: false
    default: 'true'
  
  fail-on-warnings:
    description: 'Fail the action if any warnings found'
    required: false
    default: 'true'
  
  context-lines:
    description: 'Lines of code context to include'
    required: false
    default: '3'
  
  dashboard-url:
    description: 'Dashboard base URL for PR comment link'
    required: false
    default: 'https://dashboard.swiftconcur.com'
  
  xcodebuild-args:
    description: 'Additional xcodebuild arguments (e.g., -sdk iphonesimulator ...)'
    required: false
  
  github-token:
    description: 'GitHub token for posting comments'
    required: false
    default: ${{ github.token }}

outputs:
  warning-count:
    description: 'Total number of warnings found'
    value: ${{ steps.parse.outputs.warning-count }}
  
  summary-markdown:
    description: 'Markdown summary of warnings'
    value: ${{ steps.parse.outputs.summary-markdown }}
  
  json-report:
    description: 'Path to full JSON report'
    value: ${{ steps.parse.outputs.json-report }}
  
  build-time-seconds:
    description: 'Measured build duration in seconds'
    value: ${{ steps.parse.outputs.build-time-seconds }}
  
  new-warnings:
    description: 'Number of new warnings vs baseline'
    value: ${{ steps.parse.outputs.new-warnings }}
  
  fixed-warnings:
    description: 'Number of fixed warnings vs baseline'
    value: ${{ steps.parse.outputs.fixed-warnings }}

runs:
  using: 'composite'
  steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Build SwiftConcur CLI
      shell: bash
      run: |
        set -e
        cargo build --release --manifest-path "${{ github.action_path }}/parser/Cargo.toml"
        echo "CLI built at ${{ github.action_path }}/parser/target/release/swiftconcur-parser"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Node deps for scripts
      shell: bash
      run: |
        cd "${{ github.action_path }}/scripts"
        npm install @actions/core @actions/github

    - name: Ensure jq is available (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        if ! command -v jq >/dev/null 2>&1; then
          brew install jq
        fi
        jq --version

    - id: parse
      name: Run SwiftConcur
      shell: bash
      env:
        PATH: ${{ env.PATH }}:${{ github.action_path }}/parser/target/release
        GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_SWIFT_VERSION: ${{ inputs.swift-version }}
        INPUT_WORKSPACE_PATH: ${{ inputs.workspace-path }}
        INPUT_PROJECT_PATH: ${{ inputs.project-path }}
        INPUT_SCHEME: ${{ inputs.scheme }}
        INPUT_CONFIGURATION: ${{ inputs.configuration }}
        INPUT_WARN_THRESHOLD: ${{ inputs['warn-threshold'] }}
        INPUT_THRESHOLD: ${{ inputs.threshold }}
        INPUT_BASELINE_PATH: ${{ inputs['baseline-path'] }}
        INPUT_POST_COMMENT: ${{ inputs['post-comment'] }}
        INPUT_FAIL_ON_WARNINGS: ${{ inputs['fail-on-warnings'] }}
        INPUT_CONTEXT_LINES: ${{ inputs['context-lines'] }}
        INPUT_DASHBOARD_URL: ${{ inputs['dashboard-url'] }}
        INPUT_XCODEBUILD_ARGS: ${{ inputs['xcodebuild-args'] }}
      run: |
        /bin/bash "${{ github.action_path }}/entrypoint.sh"
