name: Security Scanning & Compliance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - dependencies
        - secrets
        - container
        - code_analysis

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Security Tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rust Dependency Audit
        run: |
          echo "🔍 Running Rust dependency security audit..."
          
          # Run from root directory since Cargo.lock is there
          cargo audit --json > rust-audit.json || true
          cargo audit
          
          # Check for high/critical vulnerabilities
          CRITICAL_COUNT=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "critical")) | length' rust-audit.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "high")) | length' rust-audit.json 2>/dev/null || echo "0")
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "::warning::Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities in Rust dependencies"
          fi

      - name: Run Cargo Deny Check
        run: |
          cd parser
          echo "📋 Running cargo-deny checks..."
          
          # Create comprehensive deny configuration if it doesn't exist
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/rustsec/advisory-db"]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "deny"
          notice = "warn"
          ignore = []
          
          [licenses]
          unlicensed = "deny"
          allow = [
              "MIT",
              "Apache-2.0",
              "Apache-2.0 WITH LLVM-exception",
              "BSD-2-Clause",
              "BSD-3-Clause",
              "ISC",
              "Unicode-DFS-2016",
          ]
          deny = ["GPL-2.0", "GPL-3.0", "AGPL-1.0", "AGPL-3.0"]
          copyleft = "warn"
          allow-osi-fsf-free = "neither"
          default = "deny"
          confidence-threshold = 0.8
          
          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          
          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          allow-git = []
          EOF
          fi
          
          cargo deny check || echo "Deny check completed with warnings"

      - name: Node.js Dependency Audit (Dashboard)
        run: |
          if [ -d "dashboard" ]; then
            echo "🔍 Running Node.js dependency audit for dashboard..."
            cd dashboard
            
            # Run npm audit
            npm audit --audit-level high --json > ../node-audit.json || true
            npm audit --audit-level high
            
            # Parse results
            if [ -f ../node-audit.json ]; then
              CRITICAL_COUNT=$(jq -r '.metadata.vulnerabilities.critical // 0' ../node-audit.json)
              HIGH_COUNT=$(jq -r '.metadata.vulnerabilities.high // 0' ../node-audit.json)
              
              echo "Critical vulnerabilities: $CRITICAL_COUNT"
              echo "High vulnerabilities: $HIGH_COUNT"
              
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
                echo "::warning::Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities in Node.js dependencies"
              fi
            fi
          fi

      - name: Node.js Dependency Audit (API)
        run: |
          if [ -d "api" ]; then
            echo "🔍 Running Node.js dependency audit for API..."
            cd api
            
            # Run npm audit
            npm audit --audit-level high --json > ../api-audit.json || true
            npm audit --audit-level high
            
            # Parse results
            if [ -f ../api-audit.json ]; then
              CRITICAL_COUNT=$(jq -r '.metadata.vulnerabilities.critical // 0' ../api-audit.json)
              HIGH_COUNT=$(jq -r '.metadata.vulnerabilities.high // 0' ../api-audit.json)
              
              echo "Critical vulnerabilities: $CRITICAL_COUNT"
              echo "High vulnerabilities: $HIGH_COUNT"
              
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
                echo "::warning::Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities in API dependencies"
              fi
            fi
          fi

      - name: Upload Audit Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-reports
          path: |
            rust-audit.json
            node-audit.json
            api-audit.json
          retention-days: 30

  secrets-scanning:
    name: Secrets & Sensitive Data Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog Secrets Scan
        run: |
          echo "🕵️ Scanning for secrets and sensitive data..."
          
          # Run TruffleHog on the entire repository
          trufflehog git file://. \
            --json \
            --no-update \
            --fail \
            --exclude-paths .github/workflows/security-scan.yml \
            > trufflehog-results.json || SECRETS_FOUND=$?
          
          # Process results
          if [ -f trufflehog-results.json ]; then
            SECRETS_COUNT=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
            echo "Potential secrets found: $SECRETS_COUNT"
            
            if [ "$SECRETS_COUNT" -gt 0 ]; then
              echo "::error::Found $SECRETS_COUNT potential secrets in the repository"
              echo "Details:"
              jq -r '.[] | "- \(.DetectorName): \(.Raw[0:50])..." ' trufflehog-results.json || true
              exit 1
            fi
          fi

      - name: Scan for Common Sensitive Patterns
        run: |
          echo "🔍 Scanning for common sensitive patterns..."
          
          # Create comprehensive patterns file
          cat > sensitive_patterns.txt << 'EOF'
          # API Keys and tokens
          [Aa][Pp][Ii]_?[Kk][Ee][Yy]
          [Aa][Cc][Cc][Ee][Ss][Ss]_?[Tt][Oo][Kk][Ee][Nn]
          [Aa][Uu][Tt][Hh]_?[Tt][Oo][Kk][Ee][Nn]
          [Ss][Ee][Cc][Rr][Ee][Tt]_?[Kk][Ee][Yy]
          
          # Database URLs
          postgresql://[^\\s]*
          mysql://[^\\s]*
          mongodb://[^\\s]*
          
          # Private keys
          -----BEGIN.*PRIVATE KEY-----
          ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3}
          
          # Common service tokens
          sk_live_[0-9a-zA-Z]{24}
          pk_live_[0-9a-zA-Z]{24}
          xoxb-[0-9]{11}-[0-9]{11}-[0-9a-zA-Z]{24}
          
          # GitHub tokens
          ghp_[0-9a-zA-Z]{36}
          gho_[0-9a-zA-Z]{36}
          ghu_[0-9a-zA-Z]{36}
          ghs_[0-9a-zA-Z]{36}
          ghr_[0-9a-zA-Z]{36}
          EOF
          
          # Run grep-based scan
          echo "Running pattern-based scan..."
          grep -r -n -f sensitive_patterns.txt . \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude-dir=target \
            --exclude="*.json" \
            --exclude="sensitive_patterns.txt" \
            > pattern_scan_results.txt || true
          
          if [ -s pattern_scan_results.txt ]; then
            echo "::warning::Potential sensitive data patterns found:"
            head -20 pattern_scan_results.txt
          else
            echo "✅ No sensitive patterns found"
          fi

      - name: Check Environment Files
        run: |
          echo "🔒 Checking environment files..."
          
          # Find all potential environment files
          find . -name "*.env*" -o -name ".env" -o -name "*.env.example" -o -name "*.env.local" | while read envfile; do
            if [ -f "$envfile" ]; then
              echo "Checking: $envfile"
              
              # Check for actual secrets in env files (not examples)
              if [[ "$envfile" != *".example"* ]] && [[ "$envfile" != *".sample"* ]]; then
                # Look for non-empty secret values
                if grep -E "^[A-Z_]+=.{10,}" "$envfile" >/dev/null 2>&1; then
                  echo "::warning::Potential secrets in $envfile"
                fi
              fi
              
              # Check for common secret patterns in any env file
              if grep -iE "(secret|key|token|password)=\S+" "$envfile" >/dev/null 2>&1; then
                echo "Found secret-like variables in: $envfile"
              fi
            fi
          done

      - name: Upload Secrets Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-results
          path: |
            trufflehog-results.json
            pattern_scan_results.txt
          retention-days: 30

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code_analysis' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Analysis Tools
        run: |
          rustup component add clippy
          cargo install cargo-geiger --locked

      - name: Advanced Clippy Analysis
        run: |
          cd parser
          echo "🔍 Running advanced Clippy analysis..."
          
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -D clippy::nursery \
            -D clippy::cargo \
            -A clippy::module_name_repetitions \
            -A clippy::missing_errors_doc \
            -A clippy::missing_panics_doc \
            -A clippy::multiple_crate_versions \
            -A clippy::cargo_common_metadata \
            --message-format=json > ../clippy-results.json || true
          
          # Parse clippy results
          if [ -f ../clippy-results.json ]; then
            WARNINGS=$(grep -c '"level":"warning"' ../clippy-results.json || echo "0")
            ERRORS=$(grep -c '"level":"error"' ../clippy-results.json || echo "0")
            echo "Clippy warnings: $WARNINGS"
            echo "Clippy errors: $ERRORS"
          fi

      - name: Unsafe Code Analysis
        run: |
          cd parser
          echo "⚠️  Scanning for unsafe code usage..."
          
          cargo geiger --format json > ../geiger-results.json || true
          cargo geiger
          
          # Check for unsafe code
          UNSAFE_COUNT=$(find . -name "*.rs" -exec grep -l "unsafe" {} \; | wc -l || echo "0")
          if [ "$UNSAFE_COUNT" -gt 0 ]; then
            echo "::warning::Found unsafe code in $UNSAFE_COUNT files"
            echo "Files with unsafe code:"
            find . -name "*.rs" -exec grep -l "unsafe" {} \; || true
          else
            echo "✅ No unsafe code found"
          fi

      - name: Check for JavaScript/TypeScript files
        id: check_js_ts
        run: |
          if find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | grep -q .; then
            echo "has_js_ts=true" >> $GITHUB_OUTPUT
          else
            echo "has_js_ts=false" >> $GITHUB_OUTPUT
            echo "No JavaScript/TypeScript files found, skipping CodeQL analysis"
          fi

      - name: Initialize CodeQL
        if: steps.check_js_ts.outputs.has_js_ts == 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          # Only scan JS/TS files since CodeQL doesn't support Rust well yet

      - name: Perform CodeQL Analysis
        if: steps.check_js_ts.outputs.has_js_ts == 'true'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Upload Static Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-analysis-results
          path: |
            clippy-results.json
            geiger-results.json
          retention-days: 30

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          echo "🐳 Building Docker image for security scanning..."
          docker buildx build \
            --load \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=security-test \
            -t swiftconcur-security-test:${{ github.sha }} .

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'swiftconcur-security-test:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to Security Tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy with JSON Output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'swiftconcur-security-test:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'

      - name: Analyze Trivy Results
        run: |
          if [ -f trivy-results.json ]; then
            echo "📊 Container security scan results:"
            
            # Count vulnerabilities by severity
            CRITICAL=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json || echo "0")
            HIGH=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json || echo "0")
            MEDIUM=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json || echo "0")
            LOW=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-results.json || echo "0")
            
            echo "Critical: $CRITICAL"
            echo "High: $HIGH"
            echo "Medium: $MEDIUM"
            echo "Low: $LOW"
            
            # Set thresholds
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::error::Found $CRITICAL critical vulnerabilities in container"
              exit 1
            elif [ "$HIGH" -gt 5 ]; then
              echo "::warning::Found $HIGH high-severity vulnerabilities in container (threshold: 5)"
            fi
          fi

      - name: Docker Best Practices Scan
        run: |
          echo "📋 Checking Docker best practices..."
          
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x hadolint
          
          # Run hadolint
          ./hadolint Dockerfile --format json > hadolint-results.json || true
          ./hadolint Dockerfile || echo "Dockerfile has some issues (see details above)"
          
          # Check results
          if [ -f hadolint-results.json ]; then
            ISSUES=$(jq '. | length' hadolint-results.json)
            echo "Dockerfile issues found: $ISSUES"
          fi

      - name: Upload Container Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-results.json
            trivy-results.sarif
            hadolint-results.json
          retention-days: 30

  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [dependency-security, secrets-scanning, static-code-analysis, container-security]
    if: always()
    
    steps:
      - uses: actions/checkout@v4

      - name: Download All Scan Results
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate Security Report
        run: |
          echo "📋 Generating comprehensive security report..."
          
          cat > security-report.md << 'EOF'
          # 🔒 Security Analysis Report
          
          **Repository:** ${{ github.repository }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Scan Date:** $(date -u)  
          **Triggered By:** ${{ github.event_name }}  
          
          ## Executive Summary
          
          This report summarizes the security analysis performed on the codebase.
          
          EOF
          
          # Process dependency audit results
          if [ -f security-reports/dependency-audit-reports/rust-audit.json ]; then
            echo "## 📦 Dependency Security" >> security-report.md
            echo "" >> security-report.md
            
            CRITICAL=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "critical")) | length' security-reports/dependency-audit-reports/rust-audit.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "high")) | length' security-reports/dependency-audit-reports/rust-audit.json 2>/dev/null || echo "0")
            MEDIUM=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "medium")) | length' security-reports/dependency-audit-reports/rust-audit.json 2>/dev/null || echo "0")
            LOW=$(jq -r '.vulnerabilities.list | map(select(.advisory.severity == "low")) | length' security-reports/dependency-audit-reports/rust-audit.json 2>/dev/null || echo "0")
            
            echo "### Rust Dependencies" >> security-report.md
            echo "- Critical: $CRITICAL" >> security-report.md
            echo "- High: $HIGH" >> security-report.md
            echo "- Medium: $MEDIUM" >> security-report.md
            echo "- Low: $LOW" >> security-report.md
            echo "" >> security-report.md
          fi
          
          # Process container security results
          if [ -f security-reports/container-security-results/trivy-results.json ]; then
            echo "## 🐳 Container Security" >> security-report.md
            echo "" >> security-report.md
            
            CRITICAL=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/container-security-results/trivy-results.json || echo "0")
            HIGH=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-reports/container-security-results/trivy-results.json || echo "0")
            
            echo "- Critical: $CRITICAL" >> security-report.md
            echo "- High: $HIGH" >> security-report.md
            echo "" >> security-report.md
          fi
          
          # Add recommendations
          echo "## 🎯 Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. **Regular Updates**: Keep all dependencies updated to latest secure versions" >> security-report.md
          echo "2. **Security Monitoring**: Continue regular security scans" >> security-report.md
          echo "3. **Code Review**: Ensure security-focused code reviews" >> security-report.md
          echo "4. **Secrets Management**: Use proper secrets management solutions" >> security-report.md
          echo "5. **Container Hardening**: Regularly update base images and minimize attack surface" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📊 Compliance Status" >> security-report.md
          echo "" >> security-report.md
          
          # Determine overall compliance
          OVERALL_STATUS="COMPLIANT"
          
          # Check for critical issues
          if grep -q "::error::" security-reports/*/results.txt 2>/dev/null || [ "$CRITICAL" -gt 0 ]; then
            OVERALL_STATUS="NON-COMPLIANT"
          elif grep -q "::warning::" security-reports/*/results.txt 2>/dev/null; then
            OVERALL_STATUS="WARNING"
          fi
          
          case $OVERALL_STATUS in
            "COMPLIANT")
              echo "✅ **Status**: COMPLIANT - No critical security issues found" >> security-report.md
              ;;
            "WARNING") 
              echo "⚠️ **Status**: WARNING - Some security issues require attention" >> security-report.md
              ;;
            "NON-COMPLIANT")
              echo "❌ **Status**: NON-COMPLIANT - Critical security issues must be resolved" >> security-report.md
              ;;
          esac
          
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*Generated by SwiftConcur Security Pipeline*" >> security-report.md

      - name: Upload Comprehensive Security Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md
          retention-days: 90

      - name: Comment Security Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Truncate report if too long for comment
            const maxLength = 65000;
            const finalReport = report.length > maxLength 
              ? report.substring(0, maxLength) + '\n\n... (truncated - see full report in artifacts)'
              : report;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: finalReport
            });

      - name: Security Summary
        run: |
          echo "🔒 Security Analysis Complete"
          echo "📊 Check the security report artifact for detailed results"
          
          if [ -f security-report.md ]; then
            if grep -q "NON-COMPLIANT" security-report.md; then
              echo "❌ Security compliance check failed - critical issues found"
              exit 1
            elif grep -q "WARNING" security-report.md; then
              echo "⚠️ Security warnings detected - review recommended"
              exit 0
            else
              echo "✅ Security compliance check passed"
            fi
          fi