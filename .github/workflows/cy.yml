name: Enhanced CI with Caching & Linting
on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Cache versioning for forced updates
  CACHE_VERSION: v1
  # Performance optimizations
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10

# Cancel previous runs on new commits
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain with components
        uses: actions-rs/toolchain@v1
        with: 
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      # Multi-layer caching strategy for maximum efficiency
      - name: Cache Rust registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-registry-

      - name: Cache Rust git dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-git-

      - name: Cache Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            target/
            parser/target/
            cli/target/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-target-

      # Cache installed cargo tools for faster CI
      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-tools-${{ hashFiles('.github/workflows/**') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-tools-

      - name: Install testing tools
        run: |
          # Only install if not cached
          if ! command -v cargo-nextest &> /dev/null; then
            echo "Installing cargo-nextest..."
            cargo install cargo-nextest --locked
          else
            echo "‚úÖ cargo-nextest already available"
          fi
          
          if ! command -v cargo-tarpaulin &> /dev/null; then
            echo "Installing cargo-tarpaulin..."
            cargo install cargo-tarpaulin --locked
          else
            echo "‚úÖ cargo-tarpaulin already available"
          fi

      # Enhanced formatting check with detailed output
      - name: Check Rust formatting
        run: |
          echo "üîç Checking Rust code formatting..."
          cd parser
          
          # Check formatting with detailed output on failure
          if ! cargo fmt --all -- --check; then
            echo ""
            echo "‚ùå Code formatting issues found!"
            echo "üí° Run 'cd parser && cargo fmt --all' to fix formatting"
            echo ""
            echo "üìã Formatting diff:"
            cargo fmt --all -- --check --verbose || true
            exit 1
          fi
          echo "‚úÖ All code is properly formatted"

      # Enhanced Clippy with comprehensive linting
      - name: Run Clippy linting
        run: |
          echo "üîç Running comprehensive Clippy analysis..."
          cd parser
          
          # Use clippy configuration file and comprehensive lint set
          cargo clippy --workspace --all-targets --all-features \
            -- -D warnings \
            -D clippy::all \
            -D clippy::cargo \
            -A clippy::pedantic \
            -A clippy::module_name_repetitions \
            -A clippy::missing_errors_doc \
            -A clippy::missing_panics_doc \
            -A clippy::multiple_crate_versions \
            -A clippy::cargo_common_metadata
            
          echo "‚úÖ Clippy analysis passed"

      # Additional security and quality checks
      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          cd parser
          
          # Install cargo-audit if not available
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit --locked
          fi
          
          cargo audit || echo "‚ö†Ô∏è Security audit found issues (non-blocking)"
          
      - name: Run tests
        run: |
          cd parser
          # Run with nextest for speed
          cargo nextest run --workspace --all-features
          
          # Also run doctests (nextest doesn't support them yet)
          cargo test --doc --workspace
          
      - name: Generate coverage report
        run: |
          echo "üìä Generating coverage report..."
          cd parser
          
          # Create coverage directory
          mkdir -p ../coverage
          
          # Run tarpaulin but make it non-blocking to avoid CI failures
          if cargo tarpaulin --workspace --engine llvm --out xml --output-dir ../coverage --fail-under 0; then
            echo "‚úÖ Coverage report generated successfully"
          else
            echo "‚ö†Ô∏è Coverage generation had issues (non-blocking)"
            # Create empty coverage file to avoid upload failures
            echo '<?xml version="1.0" ?><coverage></coverage>' > ../coverage/cobertura.xml
          fi
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: coverage/cobertura.xml
          flags: rust
          fail_ci_if_error: false

  # Call the comprehensive automated tests workflow
  comprehensive-tests:
    uses: ./.github/workflows/automated-tests.yml
    needs: test-and-lint