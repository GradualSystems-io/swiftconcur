name: Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: |
          cd parser
          cargo fmt --all -- --check
      
      - name: Run clippy
        run: |
          cd parser
          cargo clippy --workspace --all-targets --all-features \
            -- -D warnings \
            -D clippy::all \
            -A clippy::pedantic \
            -A clippy::module_name_repetitions \
            -A clippy::missing_errors_doc \
            -A clippy::missing_panics_doc
      
      - name: Run tests
        run: |
          cd parser
          cargo test --workspace
  
  build:
    name: Build Release Binaries
    needs: test
    strategy:
      matrix:
        include:
          - os: macos-14        # macOS Apple Silicon (arm64)
            target: aarch64-apple-darwin
            arch: arm64
          - os: macos-13        # macOS Intel (x86_64)
            target: x86_64-apple-darwin  
            arch: x86_64
          - os: ubuntu-latest   # Linux x86_64
            target: x86_64-unknown-linux-gnu
            arch: x86_64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build CLI binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Prepare binary for release
        run: |
          # Create directory structure
          mkdir -p release-staging
          
          # Determine binary extension and OS name
          if [[ "${{ matrix.os }}" == "windows-"* ]]; then
            BINARY_EXT=".exe"
            OS_NAME="windows"
          elif [[ "${{ matrix.os }}" == "macos-"* ]]; then
            BINARY_EXT=""
            OS_NAME="macos"
          else
            BINARY_EXT=""
            OS_NAME="linux"
          fi
          
          # Copy binary to staging with expected name
          cp target/${{ matrix.target }}/release/swiftconcur-parser${BINARY_EXT} release-staging/swiftconcur-cli${BINARY_EXT}
          
          # Create README for CLI usage
          cat > release-staging/README.md << 'EOF'
          # SwiftConcur CLI
          
          Swift concurrency warning detection tool.
          
          ## Usage
          
          ```bash
          # From xcresult JSON (recommended)
          ./swiftconcur-cli -f warnings.json --format markdown
          
          # From raw xcodebuild output
          xcodebuild ... 2>&1 | ./swiftconcur-cli --format json
          
          # Set warning threshold
          ./swiftconcur-cli -f warnings.json --threshold 5
          
          # Filter specific warning types
          ./swiftconcur-cli -f warnings.json --filter actor-isolation
          ```
          
          ## Options
          
          - `--format`: Output format (json, markdown, slack)
          - `--threshold`: Maximum warnings allowed (exits 1 if exceeded)
          - `--filter`: Filter by warning type
          - `--context`: Lines of context around warnings
          - `--baseline`: Compare against baseline file
          EOF
          
          # Create tarball with proper naming convention
          cd release-staging
          tar -czf ../swiftconcur-cli-${OS_NAME}-${{ matrix.arch }}.tar.gz .
          cd ..
          
          # List contents for verification
          echo "Created tarball contents:"
          tar -tzf swiftconcur-cli-${OS_NAME}-${{ matrix.arch }}.tar.gz
      
      - name: Upload build artifact
        run: |
          # Get the OS name for consistent naming
          if [[ "${{ matrix.os }}" == "windows-"* ]]; then
            OS_NAME="windows"
          elif [[ "${{ matrix.os }}" == "macos-"* ]]; then
            OS_NAME="macos"
          else
            OS_NAME="linux"
          fi
          echo "ARTIFACT_NAME=swiftconcur-cli-${OS_NAME}-${{ matrix.arch }}" >> $GITHUB_ENV
      
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: swiftconcur-cli-*.tar.gz
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate version tag
        id: version
        run: |
          # Generate version based on date and commit
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -10)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          $COMMITS
          
          ## Assets
          
          Download the CLI for your platform:
          
          - **macOS Apple Silicon (M1/M2/M3)**: \`swiftconcur-cli-macos-arm64.tar.gz\`
          - **macOS Intel**: \`swiftconcur-cli-macos-x86_64.tar.gz\`  
          - **Linux x86_64**: \`swiftconcur-cli-linux-x86_64.tar.gz\`
          
          ## Usage
          
          \`\`\`bash
          # Extract and use
          curl -Ls https://github.com/GradualSystems-io/swiftconcur/releases/latest/download/swiftconcur-cli-macos-x86_64.tar.gz | tar xz
          ./swiftconcur-cli -f warnings.json --format markdown
          \`\`\`
          
          Full SHA: \`$(git rev-parse HEAD)\`
          EOF
      
      - name: Organize release assets
        run: |
          mkdir -p release-assets
          
          echo "Downloaded artifacts structure:"
          find . -name "*.tar.gz" -type f
          
          # Move all tarballs to release assets directory from artifact folders
          find . -name "*.tar.gz" -type f -exec cp {} release-assets/ \;
          
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Delete existing release if same version
        run: |
          # Delete existing release with same tag if it exists
          gh release delete ${{ steps.version.outputs.version }} --yes || true
          git push --delete origin ${{ steps.version.outputs.version }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: SwiftConcur CLI ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          files: release-assets/*
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify release
        run: |
          echo "âœ… Release created successfully!"
          echo "ðŸ”— Release URL: https://github.com/GradualSystems-io/swiftconcur/releases/tag/${{ steps.version.outputs.version }}"
          echo ""
          echo "ðŸŽ¯ Your expected command will work:"
          echo "curl -Ls https://github.com/GradualSystems-io/swiftconcur/releases/latest/download/swiftconcur-cli-macos-x86_64.tar.gz | tar xz"
          echo "./swiftconcur-cli -f warnings.json"